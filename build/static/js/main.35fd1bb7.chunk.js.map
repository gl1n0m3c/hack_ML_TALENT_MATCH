{"version":3,"sources":["components/LeftBar2.js","App.js","reportWebVitals.js","index.js"],"names":["directoryReducer","state","action","type","payload","toggleNode","structure","nodeId","map","node","id","isOpen","children","length","LeftBar","_ref","directory","files","onNodeClick","directoryInfo","setDirectoryInfo","React","useState","directoryStructure","dispatch","useReducer","activeNode","setActiveNode","useEffect","createElement","className","style","maxHeight","overflowY","file","index","key","onClick","nodeName","fileName","split","pop","console","log","concat","handleNodeClick","path","name","renderDirectoryStructure","App","allfiles","setFiles","totalFiles","setTotalFiles","uploadedFiles","setUploadedFiles","uploadProgress","setUploadProgress","formReport","setformReport","reportData","setReportData","selectedDirectory","setSelectedDirectory","setDirectoryStructure","selectedNode","setSelectedNode","fetch","then","response","ok","Error","json","data","Object","keys","jsonData","JSON","stringify","blob","Blob","link","document","href","window","URL","createObjectURL","download","click","catch","error","buildFullPath","directoryPath","arguments","undefined","kind","currentDirectoryPath","subPaths","subFile","filter","join","warn","onDrop","useCallback","async","acceptedFiles","directoryName","formData","FormData","append","entries","next","done","axios","post","headers","Content-Type","credentials","onUploadProgress","progressEvent","progress","Math","round","loaded","total","prevUploadedFiles","uploadFilesAndDirectories","getRootProps","getInputProps","isDragActive","useDropzone","assign","border","borderRadius","padding","textAlign","cursor","height","display","value","max","color","fontWeight","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","bind","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.35fd1bb7.chunk.js","sourcesContent":["import React, { useEffect, useReducer } from 'react';\r\nimport '../styles/LeftBar.css';\r\n\r\nconst directoryReducer = (state, action) => {\r\n  switch (action.type) {\r\n    case 'SET_STRUCTURE':\r\n      return action.payload;\r\n    case 'TOGGLE_NODE':\r\n      return toggleNode(state, action.payload);\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\n\r\n\r\nconst toggleNode = (structure, nodeId) => {\r\n  return structure.map(node => {\r\n    if (node.id === nodeId) {\r\n      return { ...node, isOpen: !node.isOpen };\r\n    } else if (node.children && node.children.length > 0) {\r\n      return { ...node, children: toggleNode(node.children, nodeId) };\r\n    }\r\n    return node;\r\n  });\r\n};\r\n\r\nconst LeftBar = ({ directory,files, onNodeClick }) => {\r\n\r\n  const [directoryInfo, setDirectoryInfo] = React.useState('');\r\n  const [directoryStructure, dispatch] = useReducer(directoryReducer, []);\r\n  const [activeNode, setActiveNode] = React.useState(null);\r\n\r\n  const handleNodeClick = (nodeName) => {\r\n    const fileName = nodeName.split('/').pop();\r\n    console.log(`Clicked on: ${fileName}`);\r\n    setActiveNode(fileName);\r\n\r\n    if (onNodeClick) {\r\n      onNodeClick(fileName);\r\n    }\r\n  };\r\n  useEffect(() => {\r\n    setDirectoryInfo(directory)\r\n\r\n  }, [directory]);\r\n\r\n\r\n  const toggleNode = (nodeId) => {\r\n    dispatch({ type: 'TOGGLE_NODE', payload: nodeId });\r\n  };\r\n\r\n  const renderDirectoryStructure = (structure) => {\r\n    return (\r\n        <ul style={{ maxHeight: '600px', overflowY: 'auto' }}>\r\n          {files.map((file, index) => (\r\n            <li key={index} style={{}}>\r\n              <span onClick={() => handleNodeClick(file.path)}>{file.name}</span>\r\n            </li>\r\n          ))}\r\n        </ul>\r\n      );\r\n  };\r\n\r\n  return (\r\n    <div className='left-bar'>\r\n      <h3>Список резюме</h3>\r\n      {directoryInfo && <p>{directoryInfo}</p>}\r\n      {directoryInfo && renderDirectoryStructure(directoryStructure)}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default LeftBar;","import './App.css';\nimport LeftBar from './components/LeftBar2'; // Подставьте правильный путь к вашему компоненту\nimport React, {useCallback, useState,useEffect} from 'react';\nimport axios from 'axios';\nimport { useDropzone } from 'react-dropzone';\n\n\n\nfunction App() {\n  const path_server = 'http://localhost:5000/'\n//  const path_server = 'https://imgq.komus.net:5000/'\n\n    // Внутри функции App\n  const [allfiles,setFiles] = useState(null);\n  const [totalFiles, setTotalFiles] = useState(0);\n  const [uploadedFiles, setUploadedFiles] = useState(0);\n  const [uploadProgress, setUploadProgress] = useState(0);\n\n  const [formReport, setformReport] = useState(0);\n  const [reportData,setReportData] = useState(null);\n\n\n  const [selectedDirectory, setSelectedDirectory] = useState(null);\n  const [directoryStructure, setDirectoryStructure] = useState([]);\n\n  const [selectedNode, setSelectedNode] = useState(null);\n\n\n  const handleNodeClick = (nodeName) => {\n    setSelectedNode(nodeName);\n  };\n  useEffect(() => {\n    // Передаем запрос на сервер для получения изображения\n    if (selectedNode) {\n      const fileName = selectedNode;\n\n      // Отправляем запрос на сервер для получения json\n      fetch(`${path_server}getJson?directoryName=${selectedDirectory}&fileName=${fileName}`)\n      .then(response => {\n         if (!response.ok) {\n        throw new Error('Network response was not ok');\n      }\n      return response.json();\n    }\n      \n      ) // Заменяем .blob() на .json()\n      .then(data => {\n        // Обработка полученных данных\n        console.log('Received data:', data);\n        if (data && Object.keys(data).length>0)\n        {\n          setUploadProgress(0);\n          setUploadedFiles(0);\n          setformReport(0);\n          setTotalFiles(0);   \n        // Пример: сохраняем данные в стейт для дальнейшего использования\n        setReportData(data);\n        // Преобразуем объект данных в JSON-строку\n        const jsonData = JSON.stringify(data);\n\n        // Создаем Blob из JSON-строки\n        const blob = new Blob([jsonData], { type: 'application/json' });\n\n\n        const link = document.createElement('a');\n        link.href = window.URL.createObjectURL(blob);\n        link.download = fileName.split('.')[0];;\n  \n  \n        link.click();\n\n        }\n      })\n      .catch(error => {\n        console.error('Error fetching data:', error);\n      });\n      \n    }\n  }, [selectedNode]);\n  const buildFullPath = (file, directoryPath = '') => {\n    if (file instanceof Blob) {\n      // Если это файл, возвращаем полный путь\n      return `${directoryPath}/${file.name}`;\n    } else if (file.kind === 'directory') {\n      // Если это директория, рекурсивно строим путь\n      const currentDirectoryPath = `${directoryPath}/${file.name}`;\n      const files = file.files || [];\n      const subPaths = files.map((subFile) => buildFullPath(subFile, currentDirectoryPath));\n      return [currentDirectoryPath, ...subPaths].filter((path) => path !== '').join(',');\n    } else {\n      // Неизвестный тип файла\n      console.warn('Unknown file type:', file);\n      return '';\n    }\n  };\n\n\n  const uploadFilesAndDirectories = async (files, directoryName) => {\n    const formData = new FormData();\n    setTotalFiles(files.length);\n //   console.log('FILES_LEN = '+files.length+' IN TOTAL='+totalFiles)\n    let uploadedCount = 0;\n  //  console.log('FILESSS=',files)\n    for (const file of files) {\n     // if (file instanceof Blob) {\n        if (1==1) {\n        // Если файл, добавляем его в FormData\n      //  console.log('APPEND',file,buildFullPath(file, directoryName))\n        formData.append('files', file, buildFullPath(file, directoryName));\n        // Увеличиваем счетчик загруженных файлов\n        uploadedCount++;\n\n      } else if (file.kind === 'file') {\n\n      } else {\n        console.warn('Unknown file type:', file);\n      }\n    }\n      // Проверка на пустоту FormData\n    console.log('FormData before upload:', formData);  // Добавим лог для отладки\n    if (!formData.entries().next().done) {\n      try {\n        const response = await axios.post(`${path_server}upload`, formData, {\n          headers: {\n            'Content-Type': 'multipart/form-data',\n            'credentials': 'include', \n          },\n                  // Добавим обработчик прогресса\n        onUploadProgress: (progressEvent) => {\n        //  const progress = Math.round((progressEvent.loaded * 100) / progressEvent.total);\n        const progress = Math.round((progressEvent.loaded * 100) / progressEvent.total);\n      //  console.log(progress, progressEvent.total,progressEvent.loaded)\n        console.log('progreeesss=', progress)\n        setUploadProgress(progress);\n        setUploadedFiles(prevUploadedFiles => prevUploadedFiles + 1);\n        },\n        });\n    \n        console.log('Files uploaded successfully:', response.data);\n      } catch (error) {\n        console.error('Error uploading files:', error);\n      }\n    } else {\n      console.log('FormData is empty');\n    }\n  };\n\n// *************************************************************************************************************************************************************\n// Для отката: selectedDirectory -> selectedDirectory.name везде дописать.\n// убрать allfiles\n\n\n  const onDrop = useCallback(async acceptedFiles => {\n\n    setUploadProgress(0);\n    setUploadedFiles(0);\n    setformReport(0);\n    setReportData(null);\n    // acceptedFiles содержит массив файлов\n    console.log('Выбраны файлы:', acceptedFiles);\n\n    setFiles(acceptedFiles)\n    setTotalFiles(acceptedFiles.length);    // используйте функциональное обновление\n    // В данном случае путь к директории будет взят из первого файла\n    /*\n    if (acceptedFiles.length > 0) {\n      const directoryPath = acceptedFiles[0].path.split('/')[1];\n      console.log(`Выбрана директория: ${directoryPath}`);\n      await uploadFilesAndDirectories(acceptedFiles, directoryPath);\n      setSelectedDirectory(directoryPath);\n    //  setDirectoryStructure([]); \n      // Здесь вы можете обработать директорию\n      // Например, передать ее на сервер или обработать локально\n    }\n    */\n  }, []);\n\n  useEffect(() => {\n    if (totalFiles>0)\n    {\n    const directoryPath = allfiles[0].path.split('/')[1];\n    console.log(`Выбрана директория: ${directoryPath}`);\n    uploadFilesAndDirectories(allfiles, directoryPath);\n    setSelectedDirectory(directoryPath);\n    console.log('FILESSSSSSSSSSSSSS!!!!!', totalFiles);\n    }\n  }, [totalFiles,allfiles]);\n\n\n\n\n  const dropzoneStyles = {\n    border: '2px dashed #ccc',\n    borderRadius: '4px',\n    padding: '20px',\n    textAlign: 'center',\n    cursor: 'pointer',\n    height: '200px',  // Указывайте желаемую высоту\n    display: 'flex',\n\n  };\n  const { getRootProps, getInputProps, isDragActive } = useDropzone({ onDrop });\n\n//         <MyButton label=\"Выбрать директорию\" onClick={handleDirectorySelect}/>\n\n\n// Загружено файлов: {uploadedFiles > totalFiles ? totalFiles : uploadedFiles} из {totalFiles}\n\n\n//   ********************************************************************************************************************************************\n  return (\n    <div className=\"App\">\n      <LeftBar directory={selectedDirectory} files ={allfiles} directoryStructure={directoryStructure} onNodeClick={handleNodeClick} />\n      <head>\n          <title>Проверка резюме</title>\n      </head>\n\n      <header className=\"App-header\">\n\n    <div className=\"app-container\">\n      <div className=\"main-content\">\n      <div className=\"buttons-container\">\n        \n      <div {...getRootProps()} style={dropzoneStyles}>\n      <input {...getInputProps()} />\n      {isDragActive ? (\n        <p style={{padding: '70px',  textAlign: 'center' }}>Перетащите директорию с резюме сюда...</p>\n      ) : (\n        <p style={{padding: '70px',  textAlign: 'center' }}>Перетащите директорию с резюме сюда</p>\n      )}\n    </div>\n        {totalFiles > 0 && (\n        <div>\n<p>\n  Загрузка файлов...\n\n</p>   \n<progress value={uploadProgress} max={100} />\n<p>  {uploadProgress >=100 && <span style={{ color: 'green', fontWeight: 'bold'}}>Файлы успешно загружены на сервер!</span>}</p>       \n\n        </div>\n      )}\n      { formReport==1 && (\n        <div>\n<p>\n  Формирование json...\n</p>  \n</div>\n      )}\n       { formReport==2 && (\n        <div>\n<p>\n  Загрузка json:\n\n</p>  \n<progress value={uploadProgress} max={100} /> \n<p>  {uploadProgress==100 && <span style={{ color: 'green', fontWeight: 'bold'}}>Отчёт успешно загружен в папку Downloads!</span>}</p>       \n\n</div>\n      )}\n  \n      </div>\n\n\n      </div>\n\n    </div>\n\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}